using System;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;

namespace TestTasks
{
    /// <summary>
    /// Тест на реализацию асинхронной обработки с ограниченными ресурсами CPU.
    /// Пусть из разных источников приходят массивы данных для обработки (см. метод RegisterDataToCalculate()). 
    /// Данные могут прибывать одновременно из нескольких потоков, а обработка может быть очень ресурсоемкой. 
    /// И чтобы чрезмерно не потреблять ресурсы CPU, на обработку требуется задействовать не более одного потока.
    /// Результаты вычислений время от времени забирает некая внешняя система вызовом GetCalculatedHashes().
    /// </summary>
    public interface ITest6
    {
        /// <summary>
        /// Калькулятор, выполняющий сложные вычисления.
        /// Присваивается извне, реализовывать его не нужно.
        /// </summary>
        IExternalCalculator AssignedCalculator { get; set; }

        /// <summary>
        /// Зарегистировать новые данные для вычисления.
        /// Метод должен вернуть управление как можно скорее, не дожидаясь, пока вычисление будет выполнено.
        /// Предусмотреть вероятность одновременного вызова этого метода из нескольких потоков.
        /// Переданные данные должны попасть в AssignedCalculator.GetVeryHardCalculatedHash(), но не в вызывающем потоке,
        /// фактическое вычисление должен выполнять какой-то фоновый поток (его нужно будет реализовать).
        /// </summary>
        /// <param name="sourceData"></param>
        /// <returns></returns>
        void RegisterDataToCalculate(byte[] sourceData);

        /// <summary>
        /// Забрать готовые результаты.
        /// Предусмотреть, что метод может вызываться многократо и одновременно с вызовом выше.
        /// Каждый результат вычисления должен возвращаться лишь однократно (повторные вызовы должны 
        /// возвращать новые результаты или пустой массив, если новых готовых вычислений еще нет).
        /// </summary>
        /// <returns></returns>
        int[] GetCalculatedHashes();
    }

    /// <summary>
    /// Какой-то внешний калькулятор, который умеет выполнять сложные ресурсоемкие вычисления.
    /// Этот калькулятор реализуем мы сами и передадим его в интерфейс выше в свойство AssignedCalculator
    /// </summary>
    public interface IExternalCalculator
    {
        /// <summary>
        /// Получить результат сложного вычисления какого-то очень важного хэша исходного массива байт.
        /// Хэш считается по нескольку секунд, а может и минут или даже часов.
        /// </summary>
        /// <returns></returns>
        int GetVeryHardCalculatedHash(byte[] sourceData);
    }
}
